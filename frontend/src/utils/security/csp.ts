/**
 * Content Security Policy utilities
 * 
 * These utilities help generate appropriate CSP directives based on environment
 * and maintain documentation of exceptions.
 */

// Environment-specific API endpoints
const getApiEndpoints = (): string[] => {
  const env = import.meta.env.MODE || 'development';
  
  if (env === 'development') {
    return ['http://localhost:5000'];
  } else if (env === 'staging') {
    return [
      'https://api-staging.deployment-portal.example.com',
      'https://logging-staging.deployment-portal.example.com'
    ];
  } else {
    // Production endpoints
    return [
      'https://api.deployment-portal.example.com',
      'https://logging.deployment-portal.example.com'
    ];
  }
};

// Get approved font and icon CDN domains
const getFontAndIconDomains = (): string[] => {
  return [
    'https://fonts.googleapis.com',
    'https://fonts.gstatic.com',
    'https://cdn.jsdelivr.net'
  ];
};

/**
 * Generates the complete CSP directives with environment-specific settings
 */
export const generateCspDirectives = (): string => {
  const apiEndpoints = getApiEndpoints();
  const cdnDomains = getFontAndIconDomains();
  
  const connectSrc = [`'self'`, ...apiEndpoints].join(' ');
  const fontSrc = [`'self'`, ...cdnDomains].join(' ');
  const styleSrc = [`'self'`, `'unsafe-inline'`, ...cdnDomains].join(' ');
  const scriptSrc = [`'self'`, ...cdnDomains].join(' ');
  
  return `
    default-src 'self';
    style-src ${styleSrc};
    font-src ${fontSrc};
    img-src 'self' data:;
    connect-src ${connectSrc};
    script-src ${scriptSrc};
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
  `;
};

/**
 * Maps CSP directives to their purpose and exceptions documentation
 * This helps maintain clear documentation of security decisions
 */
export const cspDirectiveDocumentation = {
  'default-src': {
    value: "'self'",
    purpose: "Restricts all fetch directives to same origin by default",
    exceptions: []
  },
  'style-src': {
    value: "'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net",
    purpose: "Controls stylesheet sources",
    exceptions: [
      {
        directive: "'unsafe-inline'",
        reason: "Required for Material-UI/Emotion styling which dynamically generates CSS",
        mitigation: "Limited to style-src only; all other directives remain strict",
        jiraTicket: "SEC-123" // Example tracking ticket
      },
      {
        directive: "https://fonts.googleapis.com https://cdn.jsdelivr.net",
        reason: "Required for loading Google Fonts and Material Icons stylesheets",
        mitigation: "SRI hashes are used to verify integrity of all external stylesheets"
      }
    ]
  },
  'font-src': {
    value: "'self' https://fonts.gstatic.com",
    purpose: "Controls font sources",
    exceptions: [
      {
        directive: "https://fonts.gstatic.com",
        reason: "Required for loading Google Fonts",
        mitigation: "SRI hashes are used to verify integrity of all external font resources"
      }
    ]
  },
  'img-src': {
    value: "'self' data:",
    purpose: "Controls image sources",
    exceptions: [
      {
        directive: "data:",
        reason: "Needed for SVG icons and dynamically generated images",
        mitigation: "All data URIs are generated by application code, not user input"
      }
    ]
  },
  'connect-src': {
    value: "Dynamic based on environment",
    purpose: "Controls URLs for fetch, WebSocket, and EventSource",
    exceptions: [
      {
        directive: "API endpoints",
        reason: "Required for backend communication",
        mitigation: "Limited to specific API endpoints needed by the application"
      }
    ]
  },
  'script-src': {
    value: "'self' https://cdn.jsdelivr.net",
    purpose: "Controls script sources",
    exceptions: [
      {
        directive: "https://cdn.jsdelivr.net",
        reason: "Required for loading external scripts like Chart.js",
        mitigation: "SRI hashes are used to verify integrity of all external scripts"
      }
    ]
  }
};

export default {
  generateCspDirectives,
  cspDirectiveDocumentation
};